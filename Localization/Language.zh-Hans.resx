<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>关于</value>
    <comment>InfoDialog</comment>
  </data>
  <data name="BatchFileOnly" xml:space="preserve">
    <value>仅创建批处理文件（供以后打补丁用）</value>
    <comment>MainWindow</comment>
  </data>
  <data name="CopyExecutables" xml:space="preserve">
    <value>同时将 xDelta 的可执行文件复制到输出文件夹</value>
    <comment>MainWindow</comment>
  </data>
  <data name="Credit" xml:space="preserve">
    <value>带有 GUI 的 xDelta3，可跨平台使用。\\n开发者：dan0v    xDelta 版本：3.1.0\\n本软件在很大程度上受到 xDelta GUI 2 的启发，\\n由 Brian Campbell 基于 Jordi Vermeulen 的原版开发。</value>
    <comment>MainWindow</comment>
  </data>
  <data name="DismissButton" xml:space="preserve">
    <value>关闭</value>
    <comment>Dialog</comment>
  </data>
  <data name="ErrorHeader" xml:space="preserve">
    <value>发生了错误</value>
    <comment>ErrorDialog</comment>
  </data>
  <data name="ErrorText" xml:space="preserve">
    <value>某些选项可能已被重置。请在重试之前仔细检查选项设置</value>
    <comment>ErrorDialog</comment>
  </data>
  <data name="FilesHeader" xml:space="preserve">
    <value>文件</value>
    <comment>MainWindow</comment>
  </data>
  <data name="Go" xml:space="preserve">
    <value>创建补丁！</value>
    <comment>MainWindow</comment>
  </data>
  <data name="MaximumThreads" xml:space="preserve">
    <value>最大并发数</value>
  </data>
  <data name="NewFilesHeader" xml:space="preserve">
    <value>{0} 个新文件</value>
    <comment>MainWindow</comment>
  </data>
  <data name="NewVersionHeader" xml:space="preserve">
    <value>发现版本更新</value>
    <comment>UpdateDialog</comment>
  </data>
  <data name="NewVersionText" xml:space="preserve">
    <value>可以前往 GitHub 的发布页下载 {0} 版本</value>
    <comment>UpdateDialog</comment>
  </data>
  <data name="OldFilesHeader" xml:space="preserve">
    <value>{0} 个原始文件</value>
    <comment>MainWindow</comment>
  </data>
  <data name="OpenOutputDirectory" xml:space="preserve">
    <value>打开输出文件夹</value>
    <comment>SuccessDialog</comment>
  </data>
  <data name="OptionsHeader" xml:space="preserve">
    <value>选项</value>
    <comment>MainWindow</comment>
  </data>
  <data name="PatchExtension" xml:space="preserve">
    <value>补丁文件扩展名</value>
    <comment>MainWindow</comment>
  </data>
  <data name="PatchFileDestination" xml:space="preserve">
    <value>输出文件夹</value>
    <comment>MainWindow</comment>
  </data>
  <data name="PatchSubdir" xml:space="preserve">
    <value>补丁文件子文件夹名</value>
    <comment>MainWindow</comment>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>进度</value>
    <comment>MainWindow</comment>
  </data>
  <data name="ResetDefaults" xml:space="preserve">
    <value>恢复默认设置</value>
    <comment>MainWindow</comment>
  </data>
  <data name="SaveSettings" xml:space="preserve">
    <value>保存设置</value>
    <comment>MainWindow</comment>
  </data>
  <data name="ShowFullPaths" xml:space="preserve">
    <value>显示文件完整路径</value>
    <comment>MainWindow</comment>
  </data>
  <data name="ShowTerminal" xml:space="preserve">
    <value>显示终端窗口</value>
    <comment>MainWindow</comment>
  </data>
  <data name="SuccessHeader" xml:space="preserve">
    <value>创建成功</value>
    <comment>SuccessDialog</comment>
  </data>
  <data name="SuccessText" xml:space="preserve">
    <value>已成功创建 xDelta3 补丁或补丁的批处理文件</value>
    <comment>SuccessDialog</comment>
  </data>
  <data name="ToggleSelectionButton" xml:space="preserve">
    <value>全部选择/全部取消</value>
    <comment>MainWindow</comment>
  </data>
  <data name="UnequalFilesError" xml:space="preserve">
    <value>原始文件与新文件的数量必须一致</value>
    <comment>MainWindow</comment>
  </data>
  <data name="ViewReleases" xml:space="preserve">
    <value>前往发布页</value>
    <comment>UpdateDialog</comment>
  </data>
  <data name="xDeltaArguments" xml:space="preserve">
    <value>xDelta 参数</value>
    <comment>MainWindow</comment>
  </data>
  <data name="xDeltaNotOnPath" xml:space="preserve">
    <value>未在系统路径中检测到 xDelta3，将使用本软件附带的 xDelta3</value>
    <comment>MainWindow</comment>
  </data>
  <data name="xDeltaOnPath" xml:space="preserve">
    <value>已在系统路径中检测到 xDelta3，将使用系统路径中的 xDelta3</value>
    <comment>MainWindow</comment>
  </data>
  <data name="xDeltaProcessError" xml:space="preserve">
    <value>进程遇到问题，请查看终端输出以获取更多信息</value>
  </data>
  <data name="ZipFiles" xml:space="preserve">
    <value>同时将所有补丁文件压缩为 Zip 文件</value>
    <comment>MainWindow</comment>
  </data>
  <data name="ZipName" xml:space="preserve">
    <value>Zip 文件名</value>
    <comment>MainWindow</comment>
  </data>
</root>